@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.JSInterop

@inject ShellViewModel Shell
@inject IJSRuntime JS

@switch (Item){
    case Navigation.Item navItem:
        if (navItem.Policy is null){
            <MudNavLink Icon="@navItem.Icon" OnClick="@(() => NavigateTo(navItem.NavPath))"
                        Match="@(navItem.IsPartialMatch ? NavLinkMatch.Prefix : NavLinkMatch.All)">
                @if (!IconOnly){
                    @navItem.Title
                }
            </MudNavLink>
        }
        else{
            <AuthorizeView Policy="@navItem.Policy">
                <MudNavLink Icon="@navItem.Icon" OnClick="@(() => NavigateTo(navItem.NavPath))"
                            Match="@(navItem.IsPartialMatch ? NavLinkMatch.Prefix : NavLinkMatch.All)">
                    @if (!IconOnly){
                        @navItem.Title
                    }
                </MudNavLink>
            </AuthorizeView>
        }
        break;

    case Navigation.DirectRoute navItem:
        if (navItem.Policy is null){
            <MudNavLink Icon="@navItem.Icon" Href="@navItem.NavPath"
                        Match="@(navItem.IsPartialMatch ? NavLinkMatch.Prefix : NavLinkMatch.All)">
                @if (!IconOnly){
                    @navItem.Title
                }
            </MudNavLink>
        }
        else{
            <AuthorizeView Policy="@navItem.Policy">
                <MudNavLink Icon="@navItem.Icon" Href="@navItem.NavPath"
                            Match="@(navItem.IsPartialMatch ? NavLinkMatch.Prefix : NavLinkMatch.All)">
                    @if (!IconOnly){
                        @navItem.Title
                    }
                </MudNavLink>
            </AuthorizeView>
        }
        break;

    case Navigation.Group group:
        <MudNavGroup Icon="@group.Icon" Title="@group.Title">
            @foreach (var item in group.Items){
                <NavItemView Item="item" IconOnly="IconOnly"/>
            }
        </MudNavGroup>
        break;

    case Navigation.Divider:
        <MudDivider/>
        break;
}

@code {

    [Parameter, EditorRequired] public required Navigation Item { get; set; }

    [Parameter] public bool IconOnly { get; set; }

    async Task NavigateTo(string? path) {
        if (path is null) return;
        Shell.NavigateTo(path);

        await JS.InvokeVoidAsync("window.history.replaceState", null, null, path);
    }
}